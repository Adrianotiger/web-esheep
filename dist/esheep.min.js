"use strict";var _createClass=function(){function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var VERSION="0.8.0",ACTIVATE_DEBUG=!1,DEFAULT_XML="https://adrianotiger.github.io/desktopPet/Pets/esheep64/animations.xml",COLLISION_WITH=["div","hr"],eSheep=function(){function eSheep(e,t){_classCallCheck(this,eSheep),this.userOptions=e||{allowPets:"none",allowPopup:"yes"},this.userOptions.allowPopup||(this.userOptions.allowPopup="yes"),this.userOptions.allowPets||(this.userOptions.allowPets="none"),this.animationFile=DEFAULT_XML,this.id=Date.now()+Math.random(),this.DOMdiv=document.createElement("div"),this.DOMdiv.setAttribute("id",this.id),this.DOMimg=document.createElement("img"),this.DOMinfo=document.createElement("div"),this.parser=new DOMParser,this.xmlDoc=null,this.prepareToDie=!1,this.isChild=null!=t,this.tilesX=1,this.tilesY=1,this.imageW=1,this.imageH=1,this.imageX=1,this.imageY=1,this.flipped=!1,this.dragging=!1,this.infobox=!1,this.animationId=0,this.animationStep=0,this.animationNode=null,this.sprite=new Image,this.HTMLelement=null,this.randS=100*Math.random(),this.screenW=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,this.screenH=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}return _createClass(eSheep,[{key:"Start",value:function(e){void 0!==e&&null!=e&&(this.animationFile=e);var t=new XMLHttpRequest,i=this;t.open("GET",this.animationFile,!0),t.addEventListener("readystatechange",function(){4==this.readyState&&(200==this.status?i._parseXML(this.responseText):console.error("XML not available:"+this.statusText+"\n"+this.responseText))}),t.send(null)}},{key:"remove",value:function(){var e=this;this.prepareToDie=!0,this.DOMinfo.Hide(),setTimeout(function(){e.DOMdiv=e.DOMimg=e.DOMinfo=null,document.getElementById(e.id).outerHTML=""},500)}},{key:"_parseXML",value:function(e){var n=this;this.xmlDoc=this.parser.parseFromString(e,"text/xml");var t=this.xmlDoc.getElementsByTagName("image")[0];this.tilesX=t.getElementsByTagName("tilesx")[0].textContent,this.tilesY=t.getElementsByTagName("tilesy")[0].textContent,this.sprite.addEventListener("load",function(){ACTIVATE_DEBUG&&console.log("Sprite image loaded");var e="width:"+n.sprite.width+"px;height:"+n.sprite.height+"px;position:absolute;top:0px;left:0px;max-width: none;";n.DOMimg.setAttribute("style",e),n.DOMimg.addEventListener("dragstart",function(e){return e.preventDefault(),!1}),n.imageW=n.sprite.width/n.tilesX,n.imageH=n.sprite.height/n.tilesY,e="width:"+n.imageW+"px;height:"+n.imageH+"px;position:fixed;top:"+n.imageY+"px;left:"+n.imageX+"px;transform:rotatey(0deg);cursor:move;z-index:2000;overflow:hidden;",n.DOMdiv.setAttribute("style",e),n.DOMdiv.appendChild(n.DOMimg),n.isChild?n._spawnChild():n._spawnESheep()}),this.sprite.src="data:image/png;base64,"+t.getElementsByTagName("png")[0].textContent,this.DOMimg.setAttribute("src",this.sprite.src),this.DOMdiv.addEventListener("mousemove",function(e){if(!n.dragging&&1==e.buttons&&0==e.button){n.dragging=!0,n.HTMLelement=null;for(var t=n.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),i=0;i<t.length;i++)if("drag"==t[i].getElementsByTagName("name")[0].textContent){n.animationId=t[i].getAttribute("id"),n.animationStep=0,n.animationNode=t[i];break}}}),document.body.addEventListener("mousemove",function(e){n.dragging&&(n.imageX=parseInt(e.clientX)-n.imageW/2,n.imageY=parseInt(e.clientY)-n.imageH/2,n.DOMdiv.style.left=n.imageX+"px",n.DOMdiv.style.top=n.imageY+"px",n.DOMinfo.style.left=parseInt(n.imageX+n.imageW/2)+"px",n.DOMinfo.style.top=n.imageY+"px")}),document.body.addEventListener("resize",function(){n.screenW=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n.screenH=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,n.imageY+n.imageH>n.screenH&&(n.imageY=n.screenH-n.imageH,n.DOMdiv.style.top=n.imageY+"px"),n.imageX+n.imageW>n.screenW&&(n.imageX=n.screenW-n.imageW,n.DOMdiv.style.left=n.imageX+"px")}),this.DOMdiv.addEventListener("contextmenu",function(e){return e.preventDefault(),!1}),this.DOMdiv.addEventListener("mouseup",function(e){n.dragging?n.dragging=!1:n.infobox?(n.DOMinfo.Hide(),n.infobox=!1):"yes"===n.userOptions.allowPopup&&(n.DOMinfo.style.left=Math.min(n.screenW-n.imageW,Math.max(n.imageW,parseInt(n.imageX+n.imageW/2)))+"px",n.DOMinfo.style.top=parseInt(n.imageY)+"px",n.DOMinfo.Show(),n.infobox=!0)}),this.DOMinfo.addEventListener("mouseup",function(e){n.DOMinfo.Hide(),n.infobox=!1});this.DOMinfo.setAttribute("style","width:200px;height:100px;transform:translate(-50%, -50%) scale(0.1);position:fixed;top:100px;left:10px;display:none;border-width:2px;border-radius:5px;border-style:ridge;border-color:#0000ab;text-align:center;text-shadow: 1px 1px 3px #ffff88;box-shadow: 3px 3px 10px #888888;color:black;opacity:0.9;z-index:9999;overflow:auto;transition:transform 0.3s ease;background: linear-gradient(to bottom right, rgba(128,128,255,0.7), rgba(200,200,255,0.4));");var i=this.xmlDoc.getElementsByTagName("header")[0],a=document.createElement("b").appendChild(document.createTextNode(i.getElementsByTagName("title")[0].textContent)),s=document.createElement("sup"),o=document.createElement("a"),r=document.createElement("p");s.appendChild(document.createTextNode("App v."+VERSION)),s.appendChild(document.createElement("br")),s.appendChild(document.createTextNode("Pet v."+i.getElementsByTagName("version")[0].textContent)),s.setAttribute("style","float:right;text-align:right;"),o.appendChild(document.createTextNode("üè†")),o.setAttribute("href","https://github.com/Adrianotiger/web-esheep"),o.setAttribute("target","_blank"),o.setAttribute("style","float:left"),r.appendChild(document.createTextNode(i.getElementsByTagName("info")[0].textContent)),r.setAttribute("style","font-size:"+(100-parseInt(i.getElementsByTagName("info")[0].textContent.length/10))+"%;"),this.DOMinfo.appendChild(s),this.DOMinfo.appendChild(o),"none"!==this.userOptions.allowPets&&((o=document.createElement("a")).appendChild(document.createTextNode("‚öô")),o.setAttribute("href","javascript:;"),o.setAttribute("style","float:left"),this.DOMinfo.appendChild(o),setTimeout(function(){n._loadPetList(o)},100)),this.DOMinfo.appendChild(a),this.DOMinfo.appendChild(document.createElement("br")),this.DOMinfo.appendChild(document.createElement("hr")),this.DOMinfo.appendChild(r),document.body.appendChild(this.DOMinfo),document.body.appendChild(this.DOMdiv),this.DOMinfo.Show=function(){n.DOMinfo.style.display="block",n.DOMinfo.style.transform="translate(-50%, -100%) scale(1.0)"},this.DOMinfo.Hide=function(){n.DOMinfo.style.transform="translate(-50%, -50%) scale(0.1)",setTimeout(function(){n.DOMinfo.style.display="none"},300)}}},{key:"_setPosition",value:function(e,t,i){this.DOMdiv&&(i?(this.imageX=parseInt(e),this.imageY=parseInt(t)):(this.imageX=parseInt(this.imageX)+parseInt(e),this.imageY=parseInt(this.imageY)+parseInt(t)),this.DOMdiv.style.left=this.imageX+"px",this.DOMdiv.style.top=this.imageY+"px")}},{key:"_spawnESheep",value:function(){for(var e=this.xmlDoc.getElementsByTagName("spawns")[0].getElementsByTagName("spawn"),t=0,i=0;i<e.length;i++)t+=parseInt(e[0].getAttribute("probability"));var n=Math.random()*t;for(i=t=0;i<e.length;i++)if(n<=(t+=parseInt(e[i].getAttribute("probability")))||i==e.length-1){this._setPosition(this._parseKeyWords(e[i].getElementsByTagName("x")[0].textContent),this._parseKeyWords(e[i].getElementsByTagName("y")[0].textContent),!0),ACTIVATE_DEBUG&&console.log("Spawn: "+this.imageX+", "+this.imageY),this.animationId=e[i].getElementsByTagName("next")[0].textContent,this.animationStep=0;for(var a=this.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),s=0;s<a.length;s++)if(a[s].getAttribute("id")==this.animationId){this.animationNode=a[s];a=this.xmlDoc.getElementsByTagName("childs")[0].getElementsByTagName("child");for(var o=0;o<a.length;o++)if(a[o].getAttribute("animationid")==this.animationId){ACTIVATE_DEBUG&&console.log("Child from Spawn");var r=new eSheep(null,!0);r.animationId=a[o].getElementsByTagName("next")[0].textContent;var m=a[o].getElementsByTagName("x")[0].textContent,l=a[o].getElementsByTagName("y")[0].textContent;r._setPosition(this._parseKeyWords(m),this._parseKeyWords(l),!0),r.Start(this.animationFile);break}break}break}this._nextESheepStep()}},{key:"_spawnChild",value:function(){for(var e=this.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),t=0;t<e.length;t++)if(e[t].getAttribute("id")==this.animationId){this.animationNode=e[t];break}this._nextESheepStep()}},{key:"_parseKeyWords",value:function _parseKeyWords(value){value=value.replace(/screenW/g,this.screenW),value=value.replace(/screenH/g,this.screenH),value=value.replace(/areaW/g,this.screenH),value=value.replace(/areaH/g,this.screenH),value=value.replace(/imageW/g,this.imageW),value=value.replace(/imageH/g,this.imageH),value=value.replace(/random/g,100*Math.random()),value=value.replace(/randS/g,this.randS),value=value.replace(/imageX/g,this.imageX),value=value.replace(/imageY/g,this.imageY);var ret=0;try{ret=eval(value)}catch(e){console.error("Unable to parse this position: \n'"+value+"'\n Error message: \n"+e.message)}return ret}},{key:"_getNextRandomNode",value:function(e){var t=e.getElementsByTagName("next"),i=this.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),n=0,a=!1;if(0==t.length)return this.isChild?(ACTIVATE_DEBUG&&console.log("Remove child"),document.body.removeChild(this.DOMinfo),document.body.removeChild(this.DOMdiv)):this._spawnESheep(),!1;for(var s=0;s<t.length;s++)n+=parseInt(t[s].getAttribute("probability"));var o=Math.random()*n,r=0;for(s=n=0;s<t.length;s++)if(o<=(n+=parseInt(t[s].getAttribute("probability")))){r=s;break}for(s=0;s<i.length;s++)if(i[s].getAttribute("id")==t[r].textContent){this.animationId=i[s].getAttribute("id"),this.animationStep=0,this.animationNode=i[s],a=!0;break}if(a){i=this.xmlDoc.getElementsByTagName("childs")[0].getElementsByTagName("child");for(s=0;s<i.length;s++)if(i[s].getAttribute("animationid")==this.animationId){ACTIVATE_DEBUG&&console.log("Child from Animation");var m=new eSheep(null,!0);m.animationId=i[s].getElementsByTagName("next")[0].textContent;var l=i[s].getElementsByTagName("x")[0].textContent,h=i[s].getElementsByTagName("y")[0].textContent;m._setPosition(this._parseKeyWords(l),this._parseKeyWords(h),!0),m.Start(this.animationFile);break}}return a}},{key:"_checkOverlapping",value:function(){var e,t=this.imageX,i=this.imageY+this.imageH,n=20;for(var a in this.HTMLelement&&(n=5),COLLISION_WITH)for(var s=document.body.getElementsByTagName(COLLISION_WITH[a]),o=0;o<s.length;o++)if(i>(e=s[o].getBoundingClientRect()).top-2&&i<e.top+n&&t>e.left&&t<e.right-this.imageW){var r=window.getComputedStyle(s[o]);if(""!=r.borderTopStyle&&"none"!=r.borderTopStyle&&"none"!=r.display)return s[o]}return!1}},{key:"_getNodeValue",value:function(e,t,i){if(this.animationNode&&this.animationNode.getElementsByTagName(e)){if(this.animationNode.getElementsByTagName(e)[0].getElementsByTagName(t)[0]){var n=this.animationNode.getElementsByTagName(e)[0].getElementsByTagName(t)[0].textContent;return this._parseKeyWords(n)}return i}}},{key:"_nextESheepStep",value:function(){if(!this.prepareToDie){var e,t=this._getNodeValue("start","x",0),i=this._getNodeValue("start","y",0),n=(this._getNodeValue("start","offsety",0),this._getNodeValue("start","opacity",1),this._getNodeValue("start","interval",1e3)),a=this._getNodeValue("end","x",0),s=this._getNodeValue("end","y",0),o=(this._getNodeValue("end","offsety",0),this._getNodeValue("end","interval",1),this._getNodeValue("end","interval",1e3)),r=this._parseKeyWords(this.animationNode.getElementsByTagName("sequence")[0].getAttribute("repeat")),m=this.animationNode.getElementsByTagName("sequence")[0].getAttribute("repeatfrom"),l=this.animationNode.getElementsByTagName("gravity"),h=this.animationNode.getElementsByTagName("border"),g=this.animationNode.getElementsByTagName("frame").length+(this.animationNode.getElementsByTagName("frame").length-m)*r;if(e=this.animationStep<this.animationNode.getElementsByTagName("frame").length?this.animationNode.getElementsByTagName("frame")[this.animationStep].textContent:0==m?this.animationNode.getElementsByTagName("frame")[this.animationStep%this.animationNode.getElementsByTagName("frame").length].textContent:this.animationNode.getElementsByTagName("frame")[parseInt(m)+parseInt((this.animationStep-m)%(this.animationNode.getElementsByTagName("frame").length-m))].textContent,this.DOMimg.style.left=-this.imageW*(e%this.tilesX)+"px",this.DOMimg.style.top=-this.imageH*parseInt(e/this.tilesX)+"px",this.dragging||this.infobox)return this.animationStep++,void setTimeout(this._nextESheepStep.bind(this),50);if(this.flipped&&(t=-t,a=-a),0==this.animationStep?this._setPosition(t,i,!1):this._setPosition(parseInt(t)+parseInt((a-t)*this.animationStep/g),parseInt(i)+parseInt((s-i)*this.animationStep/g),!1),this.animationStep++,this.animationStep>=g){if(this.animationNode.getElementsByTagName("action")[0])switch(this.animationNode.getElementsByTagName("action")[0].textContent){case"flip":"rotateY(0deg)"==this.DOMdiv.style.transform?(this.DOMdiv.style.transform="rotateY(180deg)",this.flipped=!0):(this.DOMdiv.style.transform="rotateY(0deg)",this.flipped=!1)}if(!this._getNextRandomNode(this.animationNode.getElementsByTagName("sequence")[0]))return}var d=!1;if(!(h&&h[0]&&h[0].getElementsByTagName("next")&&(a<0&&this.imageX<0?d=!(this.imageX=0):0<a&&this.imageX>this.screenW-this.imageW?(this.imageX=this.screenW-this.imageW,this.DOMdiv.style.left=parseInt(this.imageX)+"px",d=!0):s<0&&this.imageY<0?d=!(this.imageY=0):0<s&&this.imageY>this.screenH-this.imageH?(this.imageY=this.screenH-this.imageH,d=!0):0<s?this._checkOverlapping()&&this.imageY>this.imageH&&(this.HTMLelement=this._checkOverlapping(),this.imageY=Math.ceil(this.HTMLelement.getBoundingClientRect().top)-this.imageH,d=!0):this.HTMLelement&&(this._checkOverlapping()||(this.imageY+this.imageH>this.HTMLelement.getBoundingClientRect().top+3||this.imageY+this.imageH<this.HTMLelement.getBoundingClientRect().top-3?this.HTMLelement=null:d=(this.imageX<this.HTMLelement.getBoundingClientRect().left?this.imageX=parseInt(this.imageX+3):this.imageX=parseInt(this.imageX-3),!0),this.DOMdiv.style.left=parseInt(this.imageX)+"px")),d&&!this._getNextRandomNode(h[0]))||!d&&l&&l[0]&&l[0].getElementsByTagName("next")&&this.imageY<this.screenH-this.imageH-2&&(null==this.HTMLelement?d=!0:this._checkOverlapping()||(d=!0,this.HTMLelement=null),d&&!this._getNextRandomNode(l[0]))))return!d&&(this.imageX<-this.imageW&&a<0||this.imageX>this.screenW&&0<a||this.imageY<-this.imageH&&i<0||this.imageY>this.screenH&&0<s)?(d=!0,void(this.isChild||this._spawnESheep())):void setTimeout(this._nextESheepStep.bind(this),parseInt(n)+parseInt((o-n)*this.animationStep/g))}}},{key:"_loadPetList",value:function(o){var r=this;fetch("https://adrianotiger.github.io/web-esheep/pets/pets.json",{credentials:"same-origin",cache:"force-cache"}).then(function(e){return e.json()}).then(function(s){console.log(s),s.pets&&o.addEventListener("mouseup",function(e){e.preventDefault(),e.stopPropagation();var t=document.createElement("div");t.setAttribute("style","position:absolute;left:0px;top:20px;width:183px;height:100%;min-height:80px;background:linear-gradient(to bottom, #8080ff, #3030a1);color:yellow;"),o.parentNode.appendChild(t);function i(e){(a=document.createElement("b")).setAttribute("style","cursor:pointer;display:block;"),a.appendChild(document.createTextNode(s.pets[e].name)),a.addEventListener("click",function(){new eSheep(r.userOptions).Start("https://adrianotiger.github.io/web-esheep/pets/"+s.pets[e].file),r.remove()}),t.appendChild(a)}for(var n in s.pets){var a;i(n)}t.addEventListener("click",function(e){o.parentNode.removeChild(t)})})})}}]),eSheep}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
