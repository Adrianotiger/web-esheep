"use strict";var _createClass=function(){function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var VERSION="0.7.1",ACTIVATE_DEBUG=!1,DEFAULT_XML="http://esheep.petrucci.ch/script/animation.php",COLLISION_WITH=["div","hr"],eSheep=function(){function eSheep(e){_classCallCheck(this,eSheep),this.animationFile=DEFAULT_XML,this.id=Date.now()+Math.random(),this.DOMdiv=document.createElement("div"),this.DOMdiv.setAttribute("id",this.id),this.DOMimg=document.createElement("img"),this.DOMinfo=document.createElement("div"),this.parser=new DOMParser,this.xmlDoc=null,this.isChild=null!=e,this.tilesX=1,this.tilesY=1,this.imageW=1,this.imageH=1,this.imageX=1,this.imageY=1,this.flipped=!1,this.dragging=!1,this.infobox=!1,this.animationId=0,this.animationStep=0,this.animationNode=null,this.sprite=new Image,this.HTMLelement=null,this.randS=100*Math.random(),this.screenW=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,this.screenH=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}return _createClass(eSheep,[{key:"Start",value:function(e){void 0!==e&&null!=e&&(this.animationFile=e);var t=new XMLHttpRequest,i=this;t.open("GET",this.animationFile,!0),t.addEventListener("readystatechange",function(){4==this.readyState&&(200==this.status?i._parseXML(this.responseText):console.error("XML not available:"+this.statusText+"\n"+this.responseText))}),t.send(null)}},{key:"remove",value:function(){this.DOMdiv=this.DOMimg=this.DOMinfo=null,document.getElementById(this.id).outerHTML=""}},{key:"_parseXML",value:function(e){var t=this;this.xmlDoc=this.parser.parseFromString(e,"text/xml");var i=this.xmlDoc.getElementsByTagName("image")[0];this.tilesX=i.getElementsByTagName("tilesx")[0].textContent,this.tilesY=i.getElementsByTagName("tilesy")[0].textContent,this.sprite.addEventListener("load",function(){ACTIVATE_DEBUG&&console.log("Sprite image loaded");var e="width:"+t.sprite.width+"px;height:"+t.sprite.height+"px;position:absolute;top:0px;left:0px;max-width: none;";t.DOMimg.setAttribute("style",e),t.DOMimg.addEventListener("dragstart",function(e){return e.preventDefault(),!1}),t.imageW=t.sprite.width/t.tilesX,t.imageH=t.sprite.height/t.tilesY,e="width:"+t.imageW+"px;height:"+t.imageH+"px;position:fixed;top:"+t.imageY+"px;left:"+t.imageX+"px;transform:rotatey(0deg);cursor:move;z-index:2000;overflow:hidden;",t.DOMdiv.setAttribute("style",e),t.DOMdiv.appendChild(t.DOMimg),t.isChild?t._spawnChild():t._spawnESheep()}),this.sprite.src="data:image/png;base64,"+i.getElementsByTagName("png")[0].textContent,this.DOMimg.setAttribute("src",this.sprite.src),this.DOMdiv.addEventListener("mousemove",function(e){if(!this.dragging&&1==e.buttons&&0==e.button){this.dragging=!0,this.HTMLelement=null;for(var t=this.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),i=0;i<t.length;i++)if("drag"==t[i].getElementsByTagName("name")[0].textContent){this.animationId=t[i].getAttribute("id"),this.animationStep=0,this.animationNode=t[i];break}}}.bind(this)),document.body.addEventListener("mousemove",function(e){this.dragging&&(this.imageX=parseInt(e.clientX)-this.imageW/2,this.imageY=parseInt(e.clientY)-this.imageH/2,this.DOMdiv.style.left=this.imageX+"px",this.DOMdiv.style.top=this.imageY+"px")}.bind(this)),document.body.addEventListener("resize",function(e){this.screenW=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,this.screenH=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,this.imageY+this.imageH>this.screenH&&(this.imageY=this.screenH-this.imageH,this.DOMdiv.style.top=this.imageY+"px"),this.imageX+this.imageW>this.screenW&&(this.imageX=this.screenW-this.imageW,this.DOMdiv.style.left=this.imageX+"px")}.bind(this)),this.DOMdiv.addEventListener("contextmenu",function(e){return e.preventDefault(),!1}),this.DOMdiv.addEventListener("mouseup",function(){t.dragging?t.dragging=!1:t.infobox?(t.DOMinfo.style.display="none",t.infobox=!1):(t.DOMinfo.style.left=Math.min(t.screenW-200,Math.max(0,parseInt(t.imageX+t.imageW/2-parseInt(t.DOMinfo.style.width)/2)))+"px",t.DOMinfo.style.top=parseInt(t.imageY-parseInt(t.DOMinfo.style.height))+"px",t.DOMinfo.style.display="block",t.infobox=!0)}),this.DOMinfo.addEventListener("mouseup",function(e){t.DOMinfo.style.display="none",t.infobox=!1});this.DOMinfo.setAttribute("style","width:200px;height:100px;position:fixed;top:100px;left:10px;display:none;border-width:2px;border-radius:5px;border-style:ridge;border-color:#0000ab;text-align:center;text-shadow: 1px 1px 3px #ffff88;box-shadow: 3px 3px 10px #888888;color:black;opacity:0.9;z-index:9999;overflow:auto;background: linear-gradient(to bottom right, rgba(128,128,255,0.7), rgba(200,200,255,0.4));");var n=document.createElement("b").appendChild(document.createTextNode("eSheep")),a=document.createElement("sup"),s=document.createElement("a");a.appendChild(document.createTextNode("ver: "+VERSION)),a.setAttribute("style","float:right"),s.appendChild(document.createTextNode("http://esheep.petrucci.ch")),s.setAttribute("href","http://esheep.petrucci.ch"),s.setAttribute("target","_blank"),this.DOMinfo.appendChild(n),this.DOMinfo.appendChild(a),this.DOMinfo.appendChild(document.createElement("br")),this.DOMinfo.appendChild(document.createElement("hr")),this.DOMinfo.appendChild(document.createTextNode("Visit the home page of this lovely sheep:")),this.DOMinfo.appendChild(document.createElement("br")),this.DOMinfo.appendChild(s),document.body.appendChild(this.DOMinfo),document.body.appendChild(this.DOMdiv)}},{key:"_setPosition",value:function(e,t,i){i?(this.imageX=parseInt(e),this.imageY=parseInt(t)):(this.imageX=parseInt(this.imageX)+parseInt(e),this.imageY=parseInt(this.imageY)+parseInt(t)),this.DOMdiv&&(this.DOMdiv.style.left=this.imageX+"px",this.DOMdiv.style.top=this.imageY+"px")}},{key:"_spawnESheep",value:function(){for(var e=this.xmlDoc.getElementsByTagName("spawns")[0].getElementsByTagName("spawn"),t=0,i=0;i<e.length;i++)t+=parseInt(e[0].getAttribute("probability"));var n=Math.random()*t;for(i=t=0;i<e.length;i++)if(n<=(t+=parseInt(e[i].getAttribute("probability")))||i==e.length-1){this._setPosition(this._parseKeyWords(e[i].getElementsByTagName("x")[0].textContent),this._parseKeyWords(e[i].getElementsByTagName("y")[0].textContent),!0),ACTIVATE_DEBUG&&console.log("Spawn: "+this.imageX+", "+this.imageY),this.animationId=e[i].getElementsByTagName("next")[0].textContent,this.animationStep=0;for(var a=this.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),s=0;s<a.length;s++)if(a[s].getAttribute("id")==this.animationId){this.animationNode=a[s];a=this.xmlDoc.getElementsByTagName("childs")[0].getElementsByTagName("child");for(var o=0;o<a.length;o++)if(a[o].getAttribute("animationid")==this.animationId){ACTIVATE_DEBUG&&console.log("Child from Spawn");var h=new eSheep(!0);h.animationId=a[o].getElementsByTagName("next")[0].textContent;var m=a[o].getElementsByTagName("x")[0].textContent,r=a[o].getElementsByTagName("y")[0].textContent;h._setPosition(this._parseKeyWords(m),this._parseKeyWords(r),!0),h.Start(this.animationFile);break}break}break}this._nextESheepStep()}},{key:"_spawnChild",value:function(){for(var e=this.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),t=0;t<e.length;t++)if(e[t].getAttribute("id")==this.animationId){this.animationNode=e[t];break}this._nextESheepStep()}},{key:"_parseKeyWords",value:function _parseKeyWords(value){value=value.replace(/screenW/g,this.screenW),value=value.replace(/screenH/g,this.screenH),value=value.replace(/areaW/g,this.screenH),value=value.replace(/areaH/g,this.screenH),value=value.replace(/imageW/g,this.imageW),value=value.replace(/imageH/g,this.imageH),value=value.replace(/random/g,100*Math.random()),value=value.replace(/randS/g,this.randS),value=value.replace(/imageX/g,this.imageX),value=value.replace(/imageY/g,this.imageY);var ret=0;try{ret=eval(value)}catch(e){console.error("Unable to parse this position: \n'"+value+"'\n Error message: \n"+e.message)}return ret}},{key:"_getNextRandomNode",value:function(e){var t=e.getElementsByTagName("next"),i=this.xmlDoc.getElementsByTagName("animations")[0].getElementsByTagName("animation"),n=0,a=!1;if(0==t.length)return this.isChild?(ACTIVATE_DEBUG&&console.log("Remove child"),document.body.removeChild(this.DOMinfo),document.body.removeChild(this.DOMdiv)):this._spawnESheep(),!1;for(var s=0;s<t.length;s++)n+=parseInt(t[s].getAttribute("probability"));var o=Math.random()*n,h=0;for(s=n=0;s<t.length;s++)if(o<=(n+=parseInt(t[s].getAttribute("probability")))){h=s;break}for(s=0;s<i.length;s++)if(i[s].getAttribute("id")==t[h].textContent){this.animationId=i[s].getAttribute("id"),this.animationStep=0,this.animationNode=i[s],a=!0;break}if(a){i=this.xmlDoc.getElementsByTagName("childs")[0].getElementsByTagName("child");for(s=0;s<i.length;s++)if(i[s].getAttribute("animationid")==this.animationId){ACTIVATE_DEBUG&&console.log("Child from Animation");var m=new eSheep(!0);m.animationId=i[s].getElementsByTagName("next")[0].textContent;var r=i[s].getElementsByTagName("x")[0].textContent,l=i[s].getElementsByTagName("y")[0].textContent;m._setPosition(this._parseKeyWords(r),this._parseKeyWords(l),!0),m.Start(this.animationFile);break}}return a}},{key:"_checkOverlapping",value:function(){var e,t=this.imageX,i=this.imageY+this.imageH,n=20;for(var a in this.HTMLelement&&(n=5),COLLISION_WITH)for(var s=document.body.getElementsByTagName(COLLISION_WITH[a]),o=0;o<s.length;o++)if(i>(e=s[o].getBoundingClientRect()).top-2&&i<e.top+n&&t>e.left&&t<e.right-this.imageW){var h=window.getComputedStyle(s[o]);if(""!=h.borderTopStyle&&"none"!=h.borderTopStyle&&"none"!=h.display)return s[o]}return!1}},{key:"_getNodeValue",value:function(e,t,i){if(this.animationNode&&this.animationNode.getElementsByTagName(e)){if(this.animationNode.getElementsByTagName(e)[0].getElementsByTagName(t)[0]){var n=this.animationNode.getElementsByTagName(e)[0].getElementsByTagName(t)[0].textContent;return this._parseKeyWords(n)}return i}}},{key:"_nextESheepStep",value:function(){var e,t=this._getNodeValue("start","x",0),i=this._getNodeValue("start","y",0),n=(this._getNodeValue("start","offsety",0),this._getNodeValue("start","opacity",1),this._getNodeValue("start","interval",1e3)),a=this._getNodeValue("end","x",0),s=this._getNodeValue("end","y",0),o=(this._getNodeValue("end","offsety",0),this._getNodeValue("end","interval",1),this._getNodeValue("end","interval",1e3)),h=this._parseKeyWords(this.animationNode.getElementsByTagName("sequence")[0].getAttribute("repeat")),m=this.animationNode.getElementsByTagName("sequence")[0].getAttribute("repeatfrom"),r=this.animationNode.getElementsByTagName("gravity"),l=this.animationNode.getElementsByTagName("border"),g=this.animationNode.getElementsByTagName("frame").length+(this.animationNode.getElementsByTagName("frame").length-m)*h;if(e=this.animationStep<this.animationNode.getElementsByTagName("frame").length?this.animationNode.getElementsByTagName("frame")[this.animationStep].textContent:0==m?this.animationNode.getElementsByTagName("frame")[this.animationStep%this.animationNode.getElementsByTagName("frame").length].textContent:this.animationNode.getElementsByTagName("frame")[parseInt(m)+parseInt((this.animationStep-m)%(this.animationNode.getElementsByTagName("frame").length-m))].textContent,this.DOMimg.style.left=-this.imageW*(e%this.tilesX)+"px",this.DOMimg.style.top=-this.imageH*parseInt(e/this.tilesX)+"px",this.dragging||this.infobox)return this.animationStep++,void setTimeout(this._nextESheepStep.bind(this),50);if(this.flipped&&(t=-t,a=-a),0==this.animationStep?this._setPosition(t,i,!1):this._setPosition(parseInt(t)+parseInt((a-t)*this.animationStep/g),parseInt(i)+parseInt((s-i)*this.animationStep/g),!1),this.animationStep++,this.animationStep>=g){if(this.animationNode.getElementsByTagName("action")[0])switch(this.animationNode.getElementsByTagName("action")[0].textContent){case"flip":"rotateY(0deg)"==this.DOMdiv.style.transform?(this.DOMdiv.style.transform="rotateY(180deg)",this.flipped=!0):(this.DOMdiv.style.transform="rotateY(0deg)",this.flipped=!1)}if(!this._getNextRandomNode(this.animationNode.getElementsByTagName("sequence")[0]))return}var d=!1;return l&&l[0]&&l[0].getElementsByTagName("next")&&(a<0&&this.imageX<0?d=!(this.imageX=0):0<a&&this.imageX>this.screenW-this.imageW?(this.imageX=this.screenW-this.imageW,this.DOMdiv.style.left=parseInt(this.imageX)+"px",d=!0):s<0&&this.imageY<0?d=!(this.imageY=0):0<s&&this.imageY>this.screenH-this.imageH?(this.imageY=this.screenH-this.imageH,d=!0):0<s?this._checkOverlapping()&&this.imageY>this.imageH&&(this.HTMLelement=this._checkOverlapping(),this.imageY=Math.ceil(this.HTMLelement.getBoundingClientRect().top)-this.imageH,d=!0):this.HTMLelement&&(this._checkOverlapping()||(this.imageY+this.imageH>this.HTMLelement.getBoundingClientRect().top+3||this.imageY+this.imageH<this.HTMLelement.getBoundingClientRect().top-3?this.HTMLelement=null:(this.imageX<this.HTMLelement.getBoundingClientRect().left?this.imageX=parseInt(this.imageX+3):this.imageX=parseInt(this.imageX-3),d=!0),this.DOMdiv.style.left=parseInt(this.imageX)+"px")),d&&!this._getNextRandomNode(l[0]))||!d&&r&&r[0]&&r[0].getElementsByTagName("next")&&this.imageY<this.screenH-this.imageH-2&&(null==this.HTMLelement?d=!0:this._checkOverlapping()||(d=!0,this.HTMLelement=null),d&&!this._getNextRandomNode(r[0]))?void 0:!d&&(this.imageX<-this.imageW&&a<0||this.imageX>this.screenW&&0<a||this.imageY<-this.imageH&&i<0||this.imageY>this.screenH&&0<s)?(d=!0,void(this.isChild||this._spawnESheep())):void setTimeout(this._nextESheepStep.bind(this),parseInt(n)+parseInt((o-n)*this.animationStep/g))}}]),eSheep}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
