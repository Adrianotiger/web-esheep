"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Project:
 *                eSheep - Webpage
 *
 * Date:
 *                04.april 2018
 *
 * Author:
 *                Adriano Petrucci (http://esheep.petrucci.ch)
 *
 * Version:       0.9.0
 *
 * Introduction:
 *                As "wrapper" for the OpenSource C# project
 *                (see https://github.com/Adrianotiger/desktopPet),
 *                this javascript "class" was written to get the animations also inside your
 *                webpage. It doesn't work like the Windows version, but show much animations from it.
 *
 * Description:
 *                Add a walking pet (sheep to your home page) with just a few lines of code!
 *                Will add a lovely sheep (stray sheep) and this will walk around your page and over
 *                all <hr>s and <div>s with a border. You can also select another animation, using your
 *                personal XML file or one from the database.
 *
 * How to use:
 *                Add this line in your <header>:
 *                <script src="https://adrianotiger.github.io/web-esheep/src/esheep.js"></script>
 *                Add this lines in your <body> (at the end if possible):
 *                <script>
                    var pet = new eSheep();
                    pet.Start();
                  </script>
 *                That's all!
 *
 * Requirement:
 *                Tested on IE11, Edge and Opera
 *
 * Changelog:
 *                Version 0.9.0 - 11.07.2019:
 *                  - Updated animation link to the main project animation
 *                  - Recompiled with new Yarn version (security vulnerability)
 *                Version 0.8.0 - 29.05.2018:
 *                  - Moved animation files to github
 *                  - Added options to the script 
 *                  - Load an animation from the GitHub animations from the popup window
 *                Version 0.7.1 - 04.04.2018:
 *                  - Add max-width: none to ensure the image is properly shown
 *                Version 0.7 - 13.11.2017:
 *                  - better Javascript structure
 *                  - GitHub version (https://github.com/Adrianotiger/web-esheep)
 *                  - Childs animations added
 *                  - Better comments
 *                  - Replaced alerts with console.error
 *                Version 0.5 - 12.07.2017:
 *                  - animations starts only once the image was loaded (thanks RedSparr0w)
 *                Version 0.x:
 *                  - still beta versions...
 */

var VERSION = '0.8.0'; // web eSheep version
var ACTIVATE_DEBUG = false; // show log on console
var DEFAULT_XML = "https://adrianotiger.github.io/desktopPet/Pets/esheep64/animations.xml"; // default XML animation
var COLLISION_WITH = ["div", "hr"]; // elements on page to detect for collisions

/*
 * eSheep class.
 * Create a new class of this type if you want a new pet. Will create the components for the pet.
 * Once created, you can call [variableName].Start() to start the animation with your desired pet.
 */

var eSheep = function () {
  /* Parameters for options [default]:
   * - allowPets: [none], all
   * - allowPopup: [yes], no
   */
  function eSheep(options, isChild) {
    _classCallCheck(this, eSheep);

    this.userOptions = options ? options : { allowPets: "none", allowPopup: "yes" };
    if (!this.userOptions.allowPopup) this.userOptions.allowPopup = "yes";
    if (!this.userOptions.allowPets) this.userOptions.allowPets = "none";

    // CORS: Cross calls are not accepted by new browsers.
    this.animationFile = DEFAULT_XML;

    this.id = Date.now() + Math.random();

    this.DOMdiv = document.createElement("div"); // Div added to webpage, containing the sheep
    this.DOMdiv.setAttribute("id", this.id);
    this.DOMimg = document.createElement("img"); // Tile image, will be positioned inside the div
    this.DOMinfo = document.createElement("div"); // about dialog, if you press on the sheep

    this.parser = new DOMParser(); // XML parser
    this.xmlDoc = null; // parsed XML Document
    this.prepareToDie = false; // when removed, animations should be stopped

    this.isChild = isChild != null; // Child will be removed once they reached the end

    this.tilesX = 1; // Quantity of images inside Tile
    this.tilesY = 1; // Quantity of images inside Tile
    this.imageW = 1; // Width of the sprite image
    this.imageH = 1; // Height of the sprite image
    this.imageX = 1; // Position of sprite inside webpage
    this.imageY = 1; // Position of sprite inside webpage
    this.flipped = false; // if sprite is flipped
    this.dragging = false; // if user is dragging the sheep
    this.infobox = false; // if infobox is visible
    this.animationId = 0; // current animation ID
    this.animationStep = 0; // current animation step
    this.animationNode = null; // current animation DOM node
    this.sprite = new Image(); // sprite image (Tiles)
    this.HTMLelement = null; // the HTML element where the pet is walking on
    this.randS = Math.random() * 100; // random value, will change when page is reloaded

    this.screenW = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; // window width

    this.screenH = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight; // window height
  }

  /*
   * Start new animation on the page.
   * if animation is not set, the default sheep will be taken
   */


  _createClass(eSheep, [{
    key: "Start",
    value: function Start(animation) {
      if (typeof animation !== 'undefined' && animation != null) {
        this.animationFile = animation;
      }

      var ajax = new XMLHttpRequest();
      var sheepClass = this;

      ajax.open("GET", this.animationFile, true);
      ajax.addEventListener("readystatechange", function () {
        if (this.readyState == 4) {
          if (this.status == 200)
            // successfully loaded XML, parse it and create first esheep.
            sheepClass._parseXML(this.responseText);else console.error("XML not available:" + this.statusText + "\n" + this.responseText);
        }
      });
      ajax.send(null);
    }
  }, {
    key: "remove",
    value: function remove() {
      var _this = this;

      this.prepareToDie = true;
      this.DOMinfo.Hide();
      setTimeout(function () {
        _this.DOMdiv = _this.DOMimg = _this.DOMinfo = null;
        document.getElementById(_this.id).outerHTML = '';
      }, 500);
    }

    /*
     * Parse loaded XML, contains spawn, animations and childs
     */

  }, {
    key: "_parseXML",
    value: function _parseXML(text) {
      var _this2 = this;

      this.xmlDoc = this.parser.parseFromString(text, 'text/xml');
      var image = this.xmlDoc.getElementsByTagName('image')[0];
      this.tilesX = image.getElementsByTagName("tilesx")[0].textContent;
      this.tilesY = image.getElementsByTagName("tilesy")[0].textContent;
      // Event listener: Sprite was loaded =>
      //   play animation only when the sprite is loaded
      this.sprite.addEventListener("load", function () {
        if (ACTIVATE_DEBUG) console.log("Sprite image loaded");
        var attribute = "width:" + _this2.sprite.width + "px;" + "height:" + _this2.sprite.height + "px;" + "position:absolute;" + "top:0px;" + "left:0px;" + "max-width: none;";
        _this2.DOMimg.setAttribute("style", attribute);
        // prevent to move image (will show the entire sprite sheet if not catched)
        _this2.DOMimg.addEventListener("dragstart", function (e) {
          e.preventDefault();return false;
        });
        _this2.imageW = _this2.sprite.width / _this2.tilesX;
        _this2.imageH = _this2.sprite.height / _this2.tilesY;
        attribute = "width:" + _this2.imageW + "px;" + "height:" + _this2.imageH + "px;" + "position:fixed;" + "top:" + _this2.imageY + "px;" + "left:" + _this2.imageX + "px;" + "transform:rotatey(0deg);" + "cursor:move;" + "z-index:2000;" + "overflow:hidden;";
        _this2.DOMdiv.setAttribute("style", attribute);
        _this2.DOMdiv.appendChild(_this2.DOMimg);

        if (_this2.isChild) _this2._spawnChild();else _this2._spawnESheep();
      });

      this.sprite.src = 'data:image/png;base64,' + image.getElementsByTagName("png")[0].textContent;
      this.DOMimg.setAttribute("src", this.sprite.src);

      // Mouse move over eSheep, check if eSheep should be moved over the screen
      this.DOMdiv.addEventListener("mousemove", function (e) {
        if (!_this2.dragging && e.buttons == 1 && e.button == 0) {
          _this2.dragging = true;
          _this2.HTMLelement = null;
          var childsRoot = _this2.xmlDoc.getElementsByTagName('animations')[0];
          var childs = childsRoot.getElementsByTagName('animation');
          for (var k = 0; k < childs.length; k++) {
            if (childs[k].getElementsByTagName('name')[0].textContent == "drag") {
              _this2.animationId = childs[k].getAttribute("id");
              _this2.animationStep = 0;
              _this2.animationNode = childs[k];
              break;
            }
          }
        }
      });
      // Add event listener to body, if mouse moved too fast over the dragging eSheep
      document.body.addEventListener("mousemove", function (e) {
        if (_this2.dragging) {
          _this2.imageX = parseInt(e.clientX) - _this2.imageW / 2;
          _this2.imageY = parseInt(e.clientY) - _this2.imageH / 2;

          _this2.DOMdiv.style.left = _this2.imageX + "px";
          _this2.DOMdiv.style.top = _this2.imageY + "px";
          _this2.DOMinfo.style.left = parseInt(_this2.imageX + _this2.imageW / 2) + "px";
          _this2.DOMinfo.style.top = _this2.imageY + "px";
        }
      });
      // Window resized, recalculate eSheep bounds
      document.body.addEventListener("resize", function () {
        _this2.screenW = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;

        _this2.screenH = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;

        if (_this2.imageY + _this2.imageH > _this2.screenH) {
          _this2.imageY = _this2.screenH - _this2.imageH;
          _this2.DOMdiv.style.top = _this2.imageY + "px";
        }
        if (_this2.imageX + _this2.imageW > _this2.screenW) {
          _this2.imageX = _this2.screenW - _this2.imageW;
          _this2.DOMdiv.style.left = _this2.imageX + "px";
        }
      });
      // Don't allow contextmenu over the sheep
      this.DOMdiv.addEventListener("contextmenu", function (e) {
        e.preventDefault();
        return false;
      });
      // Mouse released
      this.DOMdiv.addEventListener("mouseup", function (e) {
        if (_this2.dragging) {
          _this2.dragging = false;
        } else if (_this2.infobox) {
          _this2.DOMinfo.Hide();
          _this2.infobox = false;
        } else {
          if (_this2.userOptions.allowPopup === "yes") {
            _this2.DOMinfo.style.left = Math.min(_this2.screenW - _this2.imageW, Math.max(_this2.imageW, parseInt(_this2.imageX + _this2.imageW / 2))) + "px";
            _this2.DOMinfo.style.top = parseInt(_this2.imageY) + "px";
            _this2.DOMinfo.Show();
            _this2.infobox = true;
          }
        }
      });
      // Mouse released over the info box
      this.DOMinfo.addEventListener("mouseup", function (e) {
        _this2.DOMinfo.Hide();
        _this2.infobox = false;
      });
      // Create About box
      var attribute = "width:200px;" + "height:100px;" + "transform:translate(-50%, -50%) scale(0.1);" + "position:fixed;" + "top:100px;left:10px;" + "display:none;" + "border-width:2px;" + "border-radius:5px;" + "border-style:ridge;" + "border-color:#0000ab;" + "text-align:center;" + "text-shadow: 1px 1px 3px #ffff88;" + "box-shadow: 3px 3px 10px #888888;" + "color:black;" + "opacity:0.9;" + "z-index:9999;" + "overflow:auto;" + "transition:transform 0.3s ease;" + "background: linear-gradient(to bottom right, rgba(128,128,255,0.7), rgba(200,200,255,0.4));";
      this.DOMinfo.setAttribute("style", attribute);
      var headerNode = this.xmlDoc.getElementsByTagName('header')[0];
      var htmlT = document.createElement("b").appendChild(document.createTextNode(headerNode.getElementsByTagName('title')[0].textContent));
      var htmlV = document.createElement("sup");
      var htmlL = document.createElement("a");
      var htmlP = document.createElement("p");
      htmlV.appendChild(document.createTextNode("App v." + VERSION));
      htmlV.appendChild(document.createElement("br"));
      htmlV.appendChild(document.createTextNode("Pet v." + headerNode.getElementsByTagName('version')[0].textContent));
      htmlV.setAttribute("style", "float:right;text-align:right;");
      htmlL.appendChild(document.createTextNode("\uD83C\uDFE0"));
      htmlL.setAttribute("href", "https://github.com/Adrianotiger/web-esheep");
      htmlL.setAttribute("target", "_blank");
      htmlL.setAttribute("style", "float:left");
      htmlP.appendChild(document.createTextNode(headerNode.getElementsByTagName('info')[0].textContent));
      htmlP.setAttribute("style", "font-size:" + (100 - parseInt(headerNode.getElementsByTagName('info')[0].textContent.length / 10)) + "%;");
      this.DOMinfo.appendChild(htmlV);
      this.DOMinfo.appendChild(htmlL);
      if (this.userOptions.allowPets !== "none") {
        htmlL = document.createElement("a");
        htmlL.appendChild(document.createTextNode("\u2699"));
        htmlL.setAttribute("href", "javascript:;");
        htmlL.setAttribute("style", "float:left");
        this.DOMinfo.appendChild(htmlL);
        setTimeout(function () {
          _this2._loadPetList(htmlL);
        }, 100);
      }
      this.DOMinfo.appendChild(htmlT);
      this.DOMinfo.appendChild(document.createElement("br"));
      this.DOMinfo.appendChild(document.createElement("hr"));
      this.DOMinfo.appendChild(htmlP);
      // Add about and sheep elements to the body
      document.body.appendChild(this.DOMinfo);
      document.body.appendChild(this.DOMdiv);

      this.DOMinfo.Show = function () {
        _this2.DOMinfo.style.display = "block";
        _this2.DOMinfo.style.transform = "translate(-50%, -100%) scale(1.0)";
      };
      this.DOMinfo.Hide = function () {
        _this2.DOMinfo.style.transform = "translate(-50%, -50%) scale(0.1)";
        setTimeout(function () {
          _this2.DOMinfo.style.display = "none";
        }, 300);
      };
    }
  }, {
    key: "_setPosition",


    /*
     * Set new position for the pet
     * If absolute is true, the x and y coordinates are used as absolute values.
     * If false, x and y are added to the current position
     */
    value: function _setPosition(x, y, absolute) {
      if (this.DOMdiv) {
        if (absolute) {
          this.imageX = parseInt(x);
          this.imageY = parseInt(y);
        } else {
          this.imageX = parseInt(this.imageX) + parseInt(x);
          this.imageY = parseInt(this.imageY) + parseInt(y);
        }
        this.DOMdiv.style.left = this.imageX + "px";
        this.DOMdiv.style.top = this.imageY + "px";
      }
    }

    /*
     * Spawn new esheep, this is called if the XML was loaded successfully
     */

  }, {
    key: "_spawnESheep",
    value: function _spawnESheep() {
      var spawnsRoot = this.xmlDoc.getElementsByTagName('spawns')[0];
      var spawns = spawnsRoot.getElementsByTagName('spawn');
      var prob = 0;
      for (var i = 0; i < spawns.length; i++) {
        prob += parseInt(spawns[0].getAttribute("probability"));
      }var rand = Math.random() * prob;
      prob = 0;
      for (i = 0; i < spawns.length; i++) {
        prob += parseInt(spawns[i].getAttribute("probability"));
        if (prob >= rand || i == spawns.length - 1) {
          this._setPosition(this._parseKeyWords(spawns[i].getElementsByTagName('x')[0].textContent), this._parseKeyWords(spawns[i].getElementsByTagName('y')[0].textContent), true);
          if (ACTIVATE_DEBUG) console.log("Spawn: " + this.imageX + ", " + this.imageY);
          this.animationId = spawns[i].getElementsByTagName('next')[0].textContent;
          this.animationStep = 0;
          var childsRoot = this.xmlDoc.getElementsByTagName('animations')[0];
          var childs = childsRoot.getElementsByTagName('animation');
          for (var k = 0; k < childs.length; k++) {
            if (childs[k].getAttribute("id") == this.animationId) {
              this.animationNode = childs[k];

              // Check if child should be loaded toghether with this animation
              var childsRoot = this.xmlDoc.getElementsByTagName('childs')[0];
              var childs = childsRoot.getElementsByTagName('child');
              for (var j = 0; j < childs.length; j++) {
                if (childs[j].getAttribute("animationid") == this.animationId) {
                  if (ACTIVATE_DEBUG) console.log("Child from Spawn");
                  var eSheepChild = new eSheep(null, true);
                  eSheepChild.animationId = childs[j].getElementsByTagName('next')[0].textContent;
                  var x = childs[j].getElementsByTagName('x')[0].textContent; //
                  var y = childs[j].getElementsByTagName('y')[0].textContent;
                  eSheepChild._setPosition(this._parseKeyWords(x), this._parseKeyWords(y), true);
                  // Start animation
                  eSheepChild.Start(this.animationFile);
                  break;
                }
              }
              break;
            }
          }
          break;
        }
      }
      // Play next step
      this._nextESheepStep();
    }

    /*
     * Like spawnESheep, but for Childs
     */

  }, {
    key: "_spawnChild",
    value: function _spawnChild() {
      var childsRoot = this.xmlDoc.getElementsByTagName('animations')[0];
      var childs = childsRoot.getElementsByTagName('animation');
      for (var k = 0; k < childs.length; k++) {
        if (childs[k].getAttribute("id") == this.animationId) {
          this.animationNode = childs[k];
          break;
        }
      }
      this._nextESheepStep();
    }

    // Parse the human readable expression from XML to a computer readable expression

  }, {
    key: "_parseKeyWords",
    value: function _parseKeyWords(value) {
      value = value.replace(/screenW/g, this.screenW);
      value = value.replace(/screenH/g, this.screenH);
      value = value.replace(/areaW/g, this.screenH);
      value = value.replace(/areaH/g, this.screenH);
      value = value.replace(/imageW/g, this.imageW);
      value = value.replace(/imageH/g, this.imageH);
      value = value.replace(/random/g, Math.random() * 100);
      value = value.replace(/randS/g, this.randS);
      value = value.replace(/imageX/g, this.imageX);
      value = value.replace(/imageY/g, this.imageY);

      var ret = 0;
      try {
        ret = eval(value);
      } catch (err) {
        console.error("Unable to parse this position: \n'" + value + "'\n Error message: \n" + err.message);
      }
      return ret;
    }

    /*
     * Once the animation is over, get the next animation to play
     */

  }, {
    key: "_getNextRandomNode",
    value: function _getNextRandomNode(parentNode) {
      var baseNode = parentNode.getElementsByTagName('next');
      var childsRoot = this.xmlDoc.getElementsByTagName('animations')[0];
      var childs = childsRoot.getElementsByTagName('animation');
      var prob = 0;
      var nodeFound = false;

      // no more animations (it was the last one)
      if (baseNode.length == 0) {
        // If it is a child, remove the child from document
        if (this.isChild) {
          // remove child
          if (ACTIVATE_DEBUG) console.log("Remove child");
          document.body.removeChild(this.DOMinfo);
          document.body.removeChild(this.DOMdiv);
          delete this;
        }
        // else, spawn sheep again
        else {
            this._spawnESheep();
          }
        return false;
      }

      for (var k = 0; k < baseNode.length; k++) {
        prob += parseInt(baseNode[k].getAttribute("probability"));
      }
      var rand = Math.random() * prob;
      var index = 0;
      prob = 0;
      for (k = 0; k < baseNode.length; k++) {
        prob += parseInt(baseNode[k].getAttribute("probability"));
        if (prob >= rand) {
          index = k;
          break;
        }
      }
      for (k = 0; k < childs.length; k++) {
        if (childs[k].getAttribute("id") == baseNode[index].textContent) {
          this.animationId = childs[k].getAttribute("id");
          this.animationStep = 0;
          this.animationNode = childs[k];
          nodeFound = true;
          break;
        }
      }

      if (nodeFound) // create Child, if present
        {
          var childsRoot = this.xmlDoc.getElementsByTagName('childs')[0];
          var childs = childsRoot.getElementsByTagName('child');
          for (k = 0; k < childs.length; k++) {
            if (childs[k].getAttribute("animationid") == this.animationId) {
              if (ACTIVATE_DEBUG) console.log("Child from Animation");
              var eSheepChild = new eSheep(null, true);
              eSheepChild.animationId = childs[k].getElementsByTagName('next')[0].textContent;
              var x = childs[k].getElementsByTagName('x')[0].textContent; //
              var y = childs[k].getElementsByTagName('y')[0].textContent;
              eSheepChild._setPosition(this._parseKeyWords(x), this._parseKeyWords(y), true);
              eSheepChild.Start(this.animationFile);
              break;
            }
          }
        }

      return nodeFound;
    }

    /*
     * Check if sheep is walking over a defined HTML TAG-element
     */

  }, {
    key: "_checkOverlapping",
    value: function _checkOverlapping() {
      var x = this.imageX;
      var y = this.imageY + this.imageH;
      var rect;
      var margin = 20;
      if (this.HTMLelement) margin = 5;
      for (var index in COLLISION_WITH) {
        var els = document.body.getElementsByTagName(COLLISION_WITH[index]);

        for (var i = 0; i < els.length; i++) {
          rect = els[i].getBoundingClientRect();

          if (y > rect.top - 2 && y < rect.top + margin) {
            if (x > rect.left && x < rect.right - this.imageW) {
              var style = window.getComputedStyle(els[i]);
              if (style.borderTopStyle != "" && style.borderTopStyle != "none" && style.display != "none") {
                return els[i];
              }
            }
          }
        }
      }
      return false;
    }

    /*
     * Try to get the value of a node (from the current animationNode), if it is not possible returns the defaultValue
     */

  }, {
    key: "_getNodeValue",
    value: function _getNodeValue(nodeName, valueName, defaultValue) {
      if (!this.animationNode || !this.animationNode.getElementsByTagName(nodeName)) return;
      if (this.animationNode.getElementsByTagName(nodeName)[0].getElementsByTagName(valueName)[0]) {
        var value = this.animationNode.getElementsByTagName(nodeName)[0].getElementsByTagName(valueName)[0].textContent;

        return this._parseKeyWords(value);
      } else {
        return defaultValue;
      }
    }

    /*
     * Next step (each frame is a step)
     */

  }, {
    key: "_nextESheepStep",
    value: function _nextESheepStep() {
      if (this.prepareToDie) return;

      var x1 = this._getNodeValue('start', 'x', 0);
      var y1 = this._getNodeValue('start', 'y', 0);
      var off1 = this._getNodeValue('start', 'offsety', 0);
      var opa1 = this._getNodeValue('start', 'opacity', 1);
      var del1 = this._getNodeValue('start', 'interval', 1000);
      var x2 = this._getNodeValue('end', 'x', 0);
      var y2 = this._getNodeValue('end', 'y', 0);
      var off2 = this._getNodeValue('end', 'offsety', 0);
      var opa2 = this._getNodeValue('end', 'interval', 1);
      var del2 = this._getNodeValue('end', 'interval', 1000);

      var repeat = this._parseKeyWords(this.animationNode.getElementsByTagName('sequence')[0].getAttribute('repeat'));
      var repeatfrom = this.animationNode.getElementsByTagName('sequence')[0].getAttribute('repeatfrom');
      var gravity = this.animationNode.getElementsByTagName('gravity');
      var border = this.animationNode.getElementsByTagName('border');

      var steps = this.animationNode.getElementsByTagName('frame').length + (this.animationNode.getElementsByTagName('frame').length - repeatfrom) * repeat;

      var index;

      if (this.animationStep < this.animationNode.getElementsByTagName('frame').length) index = this.animationNode.getElementsByTagName('frame')[this.animationStep].textContent;else if (repeatfrom == 0) index = this.animationNode.getElementsByTagName('frame')[this.animationStep % this.animationNode.getElementsByTagName('frame').length].textContent;else index = this.animationNode.getElementsByTagName('frame')[parseInt(repeatfrom) + parseInt((this.animationStep - repeatfrom) % (this.animationNode.getElementsByTagName('frame').length - repeatfrom))].textContent;

      this.DOMimg.style.left = -this.imageW * (index % this.tilesX) + "px";
      this.DOMimg.style.top = -this.imageH * parseInt(index / this.tilesX) + "px";

      if (this.dragging || this.infobox) {
        this.animationStep++;
        setTimeout(this._nextESheepStep.bind(this), 50);
        return;
      }

      if (this.flipped) {
        x1 = -x1;
        x2 = -x2;
      }

      if (this.animationStep == 0) this._setPosition(x1, y1, false);else this._setPosition(parseInt(x1) + parseInt((x2 - x1) * this.animationStep / steps), parseInt(y1) + parseInt((y2 - y1) * this.animationStep / steps), false);

      this.animationStep++;

      if (this.animationStep >= steps) {
        if (this.animationNode.getElementsByTagName('action')[0]) {
          switch (this.animationNode.getElementsByTagName('action')[0].textContent) {
            case "flip":
              if (this.DOMdiv.style.transform == "rotateY(0deg)") {
                this.DOMdiv.style.transform = "rotateY(180deg)";
                this.flipped = true;
              } else {
                this.DOMdiv.style.transform = "rotateY(0deg)";
                this.flipped = false;
              }
              break;
            default:

              break;
          }
        }
        if (!this._getNextRandomNode(this.animationNode.getElementsByTagName('sequence')[0])) return;
      }

      var setNext = false;

      if (border && border[0] && border[0].getElementsByTagName('next')) {
        if (x2 < 0 && this.imageX < 0) {
          this.imageX = 0;
          setNext = true;
        } else if (x2 > 0 && this.imageX > this.screenW - this.imageW) {
          this.imageX = this.screenW - this.imageW;
          this.DOMdiv.style.left = parseInt(this.imageX) + "px";
          setNext = true;
        } else if (y2 < 0 && this.imageY < 0) {
          this.imageY = 0;
          setNext = true;
        } else if (y2 > 0 && this.imageY > this.screenH - this.imageH) {
          this.imageY = this.screenH - this.imageH;
          setNext = true;
        } else if (y2 > 0) {
          if (this._checkOverlapping()) {
            if (this.imageY > this.imageH) {
              this.HTMLelement = this._checkOverlapping();
              this.imageY = Math.ceil(this.HTMLelement.getBoundingClientRect().top) - this.imageH;
              setNext = true;
            }
          }
        } else if (this.HTMLelement) {
          if (!this._checkOverlapping()) {
            if (this.imageY + this.imageH > this.HTMLelement.getBoundingClientRect().top + 3 || this.imageY + this.imageH < this.HTMLelement.getBoundingClientRect().top - 3) {
              this.HTMLelement = null;
            } else if (this.imageX < this.HTMLelement.getBoundingClientRect().left) {
              this.imageX = parseInt(this.imageX + 3);
              setNext = true;
            } else {
              this.imageX = parseInt(this.imageX - 3);
              setNext = true;
            }
            this.DOMdiv.style.left = parseInt(this.imageX) + "px";
          }
        }
        if (setNext) {
          if (!this._getNextRandomNode(border[0])) return;
        }
      }
      if (!setNext && gravity && gravity[0] && gravity[0].getElementsByTagName('next')) {
        if (this.imageY < this.screenH - this.imageH - 2) {
          if (this.HTMLelement == null) {
            setNext = true;
          } else {
            if (!this._checkOverlapping()) {
              setNext = true;
              this.HTMLelement = null;
            }
          }

          if (setNext) {
            if (!this._getNextRandomNode(gravity[0])) return;
          }
        }
      }
      if (!setNext) {
        if (this.imageX < -this.imageW && x2 < 0 || this.imageX > this.screenW && x2 > 0 || this.imageY < -this.imageH && y1 < 0 || this.imageY > this.screenH && y2 > 0) {
          setNext = true;
          if (!this.isChild) {
            this._spawnESheep();
          }
          return;
        }
      }

      setTimeout(this._nextESheepStep.bind(this), parseInt(del1) + parseInt((del2 - del1) * this.animationStep / steps));
    }

    /*
     * Load Pet List from GitHub, so user can change it
     */

  }, {
    key: "_loadPetList",
    value: function _loadPetList(element) {
      var _this3 = this;

      fetch("https://adrianotiger.github.io/web-esheep/pets/pets.json", {
        credentials: 'same-origin',
        cache: "force-cache"
      }).then(function (response) {
        return response.json();
      }).then(function (json) {
        console.log(json);
        if (json.pets) {
          element.addEventListener("mouseup", function (e) {
            e.preventDefault();
            e.stopPropagation();

            var div = document.createElement("div");
            div.setAttribute("style", "position:absolute;left:0px;top:20px;width:183px;height:100%;min-height:80px;background:linear-gradient(to bottom, #8080ff, #3030a1);color:yellow;");
            element.parentNode.appendChild(div);

            var _loop = function _loop(k) {
              pet = document.createElement("b");

              pet.setAttribute("style", "cursor:pointer;display:block;");
              pet.appendChild(document.createTextNode(json.pets[k].name));
              pet.addEventListener("click", function () {
                var x = new eSheep(_this3.userOptions);
                x.Start("https://adrianotiger.github.io/web-esheep/pets/" + json.pets[k].file);
                _this3.remove();
              });
              div.appendChild(pet);
            };

            for (var k in json.pets) {
              var pet;

              _loop(k);
            }

            div.addEventListener("click", function (e) {
              element.parentNode.removeChild(div);
            });
          });
        }
      });
    }
  }]);

  return eSheep;
}();

;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
